// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_followers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollower = `-- name: CreateFeedFollower :one
WITH inserted_feed_follower AS (
  INSERT INTO feed_followers (id, created_at, updated_at, user_id, feed_id)
  VALUES ($1, $2, $3, $4, $5)
  RETURNING id, created_at, updated_at, feed_id, user_id
)
SELECT inserted_feed_follower.id, inserted_feed_follower.created_at, inserted_feed_follower.updated_at, inserted_feed_follower.feed_id, inserted_feed_follower.user_id, feeds.name AS feed_name, users.name AS user_name
FROM inserted_feed_follower
JOIN feeds ON inserted_feed_follower.feed_id = feeds.id
JOIN users ON inserted_feed_follower.user_id = users.id
`

type CreateFeedFollowerParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowerRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    uuid.UUID
	UserID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollower(ctx context.Context, arg CreateFeedFollowerParams) (CreateFeedFollowerRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollower,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowerRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollowerByUserAndFeedUrl = `-- name: DeleteFeedFollowerByUserAndFeedUrl :exec
DELETE FROM feed_followers
USING feeds
WHERE feed_followers.feed_id = feeds.id
  AND feeds.url = $1
  AND feed_followers.user_id = $2
`

type DeleteFeedFollowerByUserAndFeedUrlParams struct {
	Url    string
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollowerByUserAndFeedUrl(ctx context.Context, arg DeleteFeedFollowerByUserAndFeedUrlParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowerByUserAndFeedUrl, arg.Url, arg.UserID)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT 
    ff.id, ff.created_at, ff.updated_at, ff.feed_id, ff.user_id,
    f.name AS feed_name,
    u.name AS user_name
FROM feed_followers ff
JOIN feeds f ON ff.feed_id = f.id
JOIN users u ON ff.user_id = u.id
WHERE ff.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    uuid.UUID
	UserID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
			&i.FeedName,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
